import { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import '../assets/css/order.css';
import { API_BASE } from '../components/Api_base';

export default function OrderCreatePage() {
    const { state } = useLocation();
    const navigate = useNavigate();
    useEffect(() => {
        document.title = 'Th√¥ng tin ƒë·∫∑t h√†ng | Web Cake üç∞'; // üîë ƒê·∫∑t title khi v√†o trang n√†y
    }, []);

    if (!state) {
        return (
            <div className="container">
                <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng. Vui l√≤ng ch·ªçn s·∫£n ph·∫©m l·∫°i.</p>
                <button onClick={() => navigate('/trang-chu')}>V·ªÅ trang ch·ªß</button>
            </div>
        );
    }

    const { product_id, name, code, category, main_image, attributes, quantity, unit_price, total } = state;

    return (
        <div className="order-container">
            <h2 className="order-title">Th√¥ng tin ƒë·∫∑t h√†ng</h2>

            {/* Product Summary - Always at top */}
            <div className="order-summary-card">
                {main_image && <img src={`${API_BASE}${main_image}`} alt={name} className="order-summary-image" />}
                <div className="order-summary-name">{name}</div>
                <div className="order-summary-muted">M√£ s·∫£n ph·∫©m: {code || '‚Äî'}</div>
                <div className="order-summary-muted">Danh m·ª•c: {category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}</div>
                <ul className="order-attrs">
                    {attributes.map((a, i) => (
                        <li key={i}>
                            {a.attribute_name}: {a.value}
                            {a.extra_price > 0 && ` (+${a.extra_price.toLocaleString('vi-VN')}ƒë)`}
                        </li>
                    ))}
                </ul>
                <div className="order-line">
                    ƒê∆°n gi√°: <span className="order-strong">{unit_price.toLocaleString('vi-VN')} ƒë</span>
                </div>
                <div className="order-line">
                    S·ªë l∆∞·ª£ng: <span className="order-strong">{quantity}</span>
                </div>
                <div className="order-line">
                    Th√†nh ti·ªÅn: <span className="order-strong">{total.toLocaleString('vi-VN')} ƒë</span>
                </div>
            </div>

            {/* Order Form */}
            <OrderFormSummary summary={{ product_id, name, code, category, attributes, quantity, unit_price, total }} />
        </div>
    );
}

function OrderFormSummary({ summary }) {
    const navigate = useNavigate();

    // State cho t·ªânh, huy·ªán, x√£
    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);
    const [selectedProvince, setSelectedProvince] = useState('');
    const [selectedDistrict, setSelectedDistrict] = useState('');
    const [selectedWard, setSelectedWard] = useState('');

    // State cho th√¥ng tin c√° nh√¢n (ƒë·ªÉ l∆∞u v√† fill l·∫°i)
    const [customerInfo, setCustomerInfo] = useState({
        customer_name: '',
        customer_phone: '',
        address: '',
        delivery_time: '',
        message_on_cake: '',
        provinces: '',
        districts: '',
        wards: '',
    });

    // L·∫•y d·ªØ li·ªáu t·ª´ localStorage khi load trang
    useEffect(() => {
        const savedInfo = localStorage.getItem('customer_info');
        if (savedInfo) {
            try {
                const parsed = JSON.parse(savedInfo);
                setCustomerInfo(parsed);
                setSelectedProvince(parsed.selectedProvince || '');
                setSelectedDistrict(parsed.selectedDistrict || '');
                setSelectedWard(parsed.selectedWard || '');
            } catch {
                console.warn('customer_info kh√¥ng h·ª£p l·ªá trong localStorage');
            }
        }
    }, []);

    // Fetch t·ªânh
    useEffect(() => {
        fetch('https://provinces.open-api.vn/api/p/')
            .then((res) => res.json())
            .then((data) => setProvinces(data));
    }, []);

    useEffect(() => {
        if (selectedProvince) {
            fetch(`https://provinces.open-api.vn/api/p/${selectedProvince}?depth=2`)
                .then((res) => res.json())
                .then((data) => setDistricts(data.districts || []));
        } else {
            setDistricts([]);
            setWards([]);
        }
    }, [selectedProvince]);

    useEffect(() => {
        if (selectedDistrict) {
            fetch(`https://provinces.open-api.vn/api/d/${selectedDistrict}?depth=2`)
                .then((res) => res.json())
                .then((data) => setWards(data.wards || []));
        } else {
            setWards([]);
        }
    }, [selectedDistrict]);

    async function submit(e) {
        e.preventDefault();
        const form = new FormData(e.currentTarget);
        const payload = {
            customer_name: form.get('customer_name') || '',
            customer_phone: form.get('customer_phone') || '',
            delivery_type: form.get('delivery_type') || 'self',
            delivery_time: form.get('delivery_time') || null,
            message_on_cake: form.get('message_on_cake') || null,
            province: provinces.find((p) => p.code == selectedProvince)?.name || null,
            district: districts.find((d) => d.code == selectedDistrict)?.name || null,
            ward: wards.find((w) => w.code == selectedWard)?.name || null,
            address: form.get('address') || null,
            pickup_branch: form.get('pickup_branch') || null,
            note: form.get('note') || null,
            payment_method: 'cod',
            total: Number(summary.total || 0),
            items: [
                {
                    product_id: summary.product_id,
                    product_name: summary.name,
                    attribute_summary: summary.attributes.map((a) => `${a.attribute_name}: ${a.value}`).join('; '),
                    quantity: summary.quantity,
                    price: summary.unit_price,
                    total: summary.total,
                },
            ],
        };

        const res = await fetch(`${API_BASE}/api/orders/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
            body: JSON.stringify(payload),
        });

        const data = await res.json().catch(() => ({}));
        if (!res.ok) {
            alert(data.message || 'T·∫°o ƒë∆°n th·∫•t b·∫°i');
            return;
        }
        alert('T·∫°o ƒë∆°n th√†nh c√¥ng!');
        navigate('/trang-chu');
    }

    // H√†m l∆∞u th√¥ng tin c√° nh√¢n
    function saveCustomerInfo() {
        const fullInfo = {
            ...customerInfo,
            selectedProvince,
            selectedDistrict,
            selectedWard,
        };
        localStorage.setItem('customer_info', JSON.stringify(fullInfo));
        alert('Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u!');
    }

    return (
        <form className="order-form" onSubmit={submit}>
            <div className="order-section-title">Th√¥ng tin thanh to√°n</div>

            <div className="order-row">
                <label>H·ªç & t√™n *</label>
                <input
                    name="customer_name"
                    className="order-input"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    required
                    value={customerInfo.customer_name}
                    onChange={(e) => setCustomerInfo({ ...customerInfo, customer_name: e.target.value })}
                />
            </div>
            <div className="order-row">
                <label>ƒêi·ªán tho·∫°i *</label>
                <input
                    name="customer_phone"
                    className="order-input"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    required
                    value={customerInfo.customer_phone}
                    onChange={(e) => setCustomerInfo({ ...customerInfo, customer_phone: e.target.value })}
                />
            </div>
            <div className="order-row">
                <label>Ph∆∞∆°ng th·ª©c ƒë·∫∑t ƒë∆°n</label>
                <div className="order-radio-group">
                    <label className="order-radio">
                        <input type="radio" name="delivery_type" value="self" defaultChecked />
                        ƒê·∫∑t cho t√¥i
                    </label>
                    <label className="order-radio">
                        <input type="radio" name="delivery_type" value="gift" />
                        ƒê·∫∑t ƒë∆°n t·∫∑ng
                    </label>
                </div>
            </div>

            {/* Th·ªùi gian & N·ªôi dung b√°nh */}
            <div className="order-row">
                <label>Th·ªùi gian nh·∫≠n ƒë∆°n</label>
                <input
                    type="datetime-local"
                    name="delivery_time"
                    className="order-input"
                    value={customerInfo.delivery_time}
                    onChange={(e) => setCustomerInfo({ ...customerInfo, delivery_time: e.target.value })}
                />
            </div>
            <div className="order-row">
                <label>N·ªôi dung ghi tr√™n ƒë∆°n</label>
                <input
                    name="message_on_cake"
                    className="order-input"
                    placeholder="V√≠ d·ª•: T·∫∑ng em b√©..."
                    value={customerInfo.message_on_cake}
                    onChange={(e) => setCustomerInfo({ ...customerInfo, message_on_cake: e.target.value })}
                />
            </div>

            {/* Ch·ªçn t·ªânh/huy·ªán/x√£ */}
            <div className="order-row">
                <label>T·ªânh/ Th√†nh ph·ªë</label>
                <select value={selectedProvince} onChange={(e) => setSelectedProvince(e.target.value)}>
                    <option value="">Ch·ªçn T·ªânh/ Th√†nh ph·ªë</option>
                    {provinces.map((p) => (
                        <option key={p.code} value={p.code}>
                            {p.name}
                        </option>
                    ))}
                </select>
            </div>
            <div className="order-row">
                <label>Qu·∫≠n/ Huy·ªán</label>
                <select value={selectedDistrict} onChange={(e) => setSelectedDistrict(e.target.value)}>
                    <option value="">Ch·ªçn Qu·∫≠n/ Huy·ªán</option>
                    {districts.map((d) => (
                        <option key={d.code} value={d.code}>
                            {d.name}
                        </option>
                    ))}
                </select>
            </div>
            <div className="order-row">
                <label>X√£/ Ph∆∞·ªùng</label>
                <select name="ward" value={selectedWard} onChange={(e) => setSelectedWard(e.target.value)}>
                    <option value="">Ch·ªçn X√£/ Ph∆∞·ªùng</option>
                    {wards.map((w) => (
                        <option key={w.code} value={w.code}>
                            {w.name}
                        </option>
                    ))}
                </select>
            </div>

            <div className="order-row">
                <label>ƒê·ªãa ch·ªâ nh·∫≠n ƒë∆°n *</label>
                <input
                    name="address"
                    className="order-input"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n ƒë∆°n"
                    required
                    value={customerInfo.address}
                    onChange={(e) => setCustomerInfo({ ...customerInfo, address: e.target.value })}
                />
            </div>

            <div className="order-row">
                <label>Nh·∫≠n ƒë∆°n ·ªü:</label>
                <select name="pickup_branch" className="order-select">
                    <option value="">Ch·ªçn ƒë·ªãa ƒëi·ªÉm nh·∫≠n ƒë∆°n</option>
                    <option value="Nh·∫≠n t·∫°i qu√°n">Nh·∫≠n t·∫°i ICHI PETS</option>
                    <option value="Nh·∫≠n t·∫°i nh√†">Nh·∫≠n t·∫°i nh√†</option>
                </select>
            </div>

            <div className="order-section-title">Th√¥ng tin b·ªï sung</div>
            <div className="order-row">
                <label>Ghi ch√∫ ƒë∆°n h√†ng</label>
                <textarea name="note" className="order-textarea" placeholder="Ghi ch√∫ th√™m n·∫øu c·∫ßn..."></textarea>
            </div>

            <div className="order-actions">
                <button type="button" className="order-btn secondary" onClick={() => navigate(-1)}>
                    Quay l·∫°i
                </button>
                <button type="button" className="order-btn secondary" onClick={saveCustomerInfo}>
                    L∆∞u th√¥ng tin cho l·∫ßn sau
                </button>
                <button type="submit" className="order-btn">
                    X√°c nh·∫≠n ƒë·∫∑t h√†ng
                </button>
            </div>
        </form>
    );
}
